#+title: Emacs Configuration
#+property: header-args :tangle ./init.el
#+auto_tangle: t
* defaults
** use-package
/Set/ load path, initialize use-package, and set custom file
#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name "pers-config" user-emacs-directory))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq custom-file "~/.emacs.d/custom.el")
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :config
    (auto-package-update-maybe))
  (use-package org-auto-tangle
    :diminish
    :init
    (add-hook 'org-mode-hook 'org-auto-tangle-mode))
    #+end_src
** ui tweaks
Set some personal variables and eliminate weird emacs defaults
#+begin_src emacs-lisp

  (defvar jas/window-inc-size-hor 20)
  (defvar jas/window-inc-size-vert 10)
  (defvar jas/default-font-size 180)
  (defvar jas/default-variable-font-size 180)
  (defvar jas/default-fixed-font "FiraMono")
  (defvar jas/default-variable-font "Genos")
  (setq inhibit-startup-message t)
  (setq tab-width 2)
  (blink-cursor-mode -1)
  (show-paren-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (defun display-startup-echo-area-message ()
    (message ""))
  (use-package helpful)


  (use-package no-littering
    :init
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src
** openwith
Open pdfs in zathura
#+begin_src emacs-lisp
    (use-package openwith
      :config
      (openwith-mode 1))
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("pdf"))
                 "zathura"
                 '(file))))
#+end_src
** keys
*** evil
#+begin_src emacs-lisp
    (use-package undo-tree
    :diminish)
    (global-undo-tree-mode)
    (use-package evil
      :init
      (setq evil-undo-system 'undo-tree)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump t)
      (setq evil-want-C-w-delete nil)
      (setq evil-want-integration t)
      (setq evil-want-fine-undo t)
      (setq evil-shift-width tab-width)
      :config
      (evil-mode 1))

    (use-package evil-escape
      :diminish
      :init
      (setq-default evil-escape-key-sequence "jk")
      (setq-default evil-escape-delay 0.1)
      :config
      (evil-escape-mode 1))
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
#+end_src
*** general
#+begin_src emacs-lisp
  (use-package which-key
    :diminish 
    :config
    (which-key-mode 1)
    (setq which-key-idle-delay 1))
  (use-package general
    :config (general-evil-setup t))
  (general-create-definer jas/leader-def
    ;; :prefix my-leader
    :prefix "SPC")
  (general-define-key
   "C-=" 'text-scale-increase
   "C--" 'text-scale-decrease) 
  (general-define-key
   :keymaps 'read-passwd-map
   "C-v" 'evil-paste-after)
  (jas/leader-def
    :states 'normal
    "." 'find-file
    "," 'consult-buffer
    "fp" (lambda () (interactive) (find-file (expand-file-name "init.org" user-emacs-directory)))
    "fr" 'consult-recent-file
    "hi" 'info
    "bn" 'switch-to-next-buffer
    "bv" 'switch-to-prev-buffer
    "oa" 'org-agenda
    "hf" 'helpful-callable
    "hv" 'helpful-variable
    "wv" 'evil-window-vsplit
    "ws" 'evil-window-split
    "ww" 'evil-window-delete
    "wl" 'evil-window-right
    "wh" 'evil-window-left
    "wk" 'evil-window-up
    "wj" 'evil-window-down
    "w]" (lambda () (interactive) (enlarge-window-horizontally jas/window-inc-size-hor)) 
    "w[" (lambda () (interactive) (shrink-window-horizontally jas/window-inc-size-hor)) 
    "w}" (lambda () (interactive) (enlarge-window jas/window-inc-size-vert)) 
    "w{" (lambda () (interactive) (shrink-window jas/window-inc-size-vert)) 
    "w=" 'balance-windows
    "wt" 'tear-off-window

    )
#+end_src
* ui
** theme
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font jas/default-fixed-font :height jas/default-font-size )
  (set-face-attribute 'fixed-pitch nil :font jas/default-fixed-font :height jas/default-font-size )
  (set-face-attribute 'variable-pitch nil :font jas/default-variable-font :height jas/default-font-size )
  (use-package diminish)
  (use-package all-the-icons)
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t)) ; if nil, italics is universally disabled
  (use-package kaolin-themes)
  (load-theme 'kaolin-bubblegum t)
#+end_src
** modeline
#+begin_src emacs-lisp
  (setq initial-scratch-message "")
  (line-number-mode 0)
  (diminish 'evil-collection-unimpaired-mode)
  (diminish 'visual-line-mode)
  (with-eval-after-load 'yasnippet
  (diminish 'yas-minor-mode))
  (with-eval-after-load 'reftex
    (diminish 'reftex-mode))
  (with-eval-after-load 'eldoc
    (diminish 'eldoc-mode))
  (with-eval-after-load 'face-remap
    (diminish 'buffer-face-mode))
  (with-eval-after-load 'org-indent
    (diminish 'org-indent-mode))
  (with-eval-after-load 'face-remap
    (diminish 'text-scale-mode))

#+end_src
** completion
#+begin_src emacs-lisp
  (use-package counsel)
  (recentf-mode 1)
    (use-package savehist
      :init
      (savehist-mode))
      (use-package vertico
        :init
        (vertico-mode))
      (use-package vertico-directory
        :after vertico
        :ensure nil
        ;; More convenient directory navigation commands
        :bind (:map vertico-map
                    ("RET" . vertico-directory-enter)
                    ("DEL" . vertico-directory-delete-char)
                    ("M-DEL" . vertico-directory-delete-word)
                    ("C-k" . previous-line-or-history-element)
                     ("C-j" . next-line-or-history-element))
        ;; Tidy shadowed file names
        :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
      (use-package consult)
      (use-package marginalia
        :init (marginalia-mode))
      (use-package embark)
      (use-package embark-consult)
      (use-package orderless
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles basic partial-completion)))))
  (use-package consult-flycheck)
#+end_src
* org
** defaults
#+begin_src emacs-lisp
(use-package org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
      (setq org-src-tab-acts-natively t)
      (setq org-src-fontify-natively t)
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-hook 'org-mode-hook (lambda() (display-line-numbers-mode 0)))
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (add-hook 'org-mode-hook 'org-indent-mode)
      (add-hook 'org-mode-hook 'visual-line-mode)
      (add-hook 'org-mode-hook (lambda () (set-fringe-mode 10)))
  (setq org-ellipsis " ▼"
          org-superstar-remove-leading-stars t
          org-hide-emphasis-markers t
          org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
          org-superstar-item-bullet-alist '((?+ . ?◆) (?- . ?•))
          org-superstar-special-todo-items 'hide)
    (add-hook 'org-mode-hook 'variable-pitch-mode)
    (add-hook 'org-mode-hook 'visual-line-mode)
    (set-face-attribute 'org-document-title nil :font jas/default-fixed-font :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 2.0)
                    (org-level-2 . 2.0)
                    (org-level-3 . 1.5)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1))) (set-face-attribute (car face) nil :font jas/default-variable-font :weight 'medium :height (cdr face)))

    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
#+end_src
** agenda
*** defaults
#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/notes"
        org-agenda-files '("~/Dropbox/notes" "~/Dropbox/notes/daily"))
  (setq org-agenda-window-setup 'only-window)
  (use-package org-fancy-priorities)
  (setq org-fancy-priorities-list '("⚡" "⚠" "❗"))
  (setq
   org-agenda-block-separator ?\u25AA
   org-todo-keywords
   '((sequence
      "TODO(t)"
      "WAIT(w)"
      "|"
      "DONE(d)"
      "CANCELLED(c)"
      )))
  (setq org-agenda-remove-tags t)
#+end_src
*** pomodoro
#+begin_src emacs-lisp
    (setq org-clock-mode-line-entry nil)
    (use-package org-pomodoro
      :after org)
  (setq org-pomodoro-length 45)
  (setq org-pomodoro-short-break-length 25)
  (setq org-pomodoro-long-break-length 45)
      (jas/leader-def
   :states 'normal
        "op"  'org-pomodoro)
#+end_src
** keys
#+begin_src emacs-lisp
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
      (jas/leader-def
    :states 'normal
    :keymaps 'org-mode-map
     "mx" 'org-toggle-checkbox
     "mp" 'org-priority
     "mt" 'org-time-stamp)
    (general-define-key
   :keymaps 'org-mode-map
  "C-<return>" 'org-meta-return
  "M-<return>" 'org-insert-todo-heading
  )
#+end_src
** denote
#+begin_src emacs-lisp
      (use-package denote)
      (setq denote-directory "~/Dropbox/notes")
  
      (setq denote-templates '((daily . "* Journal\n\n* Tasks\n** TODO [/]\n1. [ ] Mindfulness(10min)\n2. [ ] Journaling(5min)\n3. [ ] Check Out\n** Notes") (math-landing-page . "* meta-analysis\n* Source")))

      (defun daily-journal ()
        "Create an entry tagged 'journal' with the date as its title."
        (interactive)
        (denote
         (format-time-string "%A %e %B %Y") ; format like Tuesday 14 June 2022
         '("daily")
         'org
         (concat denote-directory "/daily")
         nil
         'daily)) ; multiple keywords are a list of strings: '("one" "two")
#+end_src
** citar
#+begin_src emacs-lisp
  (use-package citar
    :custom
    (citar-bibliography '("~/Dropbox/shared-notes/latex/templates/refs.bib")))
  (use-package citar-denote
    :diminish
    :after citar denote
    :config
    (citar-denote-mode)
    (setq citar-open-always-create-notes t))
  (setq citar-library-paths '("~/library/papers/" "~/Dropbox/shared-notes/bookshelf/papers"))
  (setq citar-templates
        '((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
          (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
          (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
          (note . "Notes on ${author editor}, ${title}")))
  (setq citar-symbols
        `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . "📁")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . "🖋️")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . "🔗")))
  (setq citar-symbol-separator "  ")
#+end_src
* latex
** auctex
#+begin_src emacs-lisp
        (general-define-key
    :keymaps 'LaTeX-mode-map
  "C-<return>" 'LaTeX-insert-item
      )
    (setq TeX-electric-sub-and-superscript t)
          (setq TeX-auto-save t)
          (setq TeX-parse-self t)
          (setq-default TeX-master nil)
          (use-package tex-mode
            :ensure auctex)
          (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
          (add-hook 'TeX-mode-hook 'electric-pair-mode)
          (add-hook 'TeX-mode-hook 'visual-line-mode)
          (add-hook 'TeX-mode-hook 'reftex-mode)
          (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
          (add-hook 'TeX-mode-hook (lambda () (TeX-fold-mode 1) (TeX-fold-buffer)))
          (add-hook 'TeX-mode-hook 'prettify-symbols-mode)
          (add-hook 'TeX-mode-hook
                    (lambda ()
                      (push '("\\mathbb{C}" . ?ℂ) prettify-symbols-alist)
                      (push '("\\mathbb{F}" . ?𝔽) prettify-symbols-alist)
                      ))
#+end_src
** snippets
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'electric-pair-mode)
(use-package yasnippet)
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(use-package yasnippet-snippets)
(use-package aas
  :hook (LaTeX-mode . aas-activate-for-major-mode))
(yas-global-mode 1)
(use-package laas
  :hook ((LaTeX-mode . laas-mode))
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
      "mk" (lambda () (interactive)
                  (yas-expand-snippet "$$0$"))
      "\\[" (lambda () (interactive)
                  (yas-expand-snippet "\\[$0\\]"))
    ;; set condition!
    :cond #'texmathp ; expand only while in math
    "spn" (lambda () (interactive)
             (yas-expand-snippet "\\Span($1)$0"))
    "in" (lambda () (interactive)
             (yas-expand-snippet "\\in"))
    "sum" (lambda () (interactive)
             (yas-expand-snippet "\\sum_{$1}^{$2}$0"))
    "||" (lambda () (interactive)
             (yas-expand-snippet "||$1||$0"))
    ;; add accent snippets
    :cond #'laas-object-on-left-condition
    "qq" (lambda () (interactive) (laas-wrap-previous-object "sqrt"))))
#+end_src
** syntax
#+begin_src emacs-lisp
       (use-package flycheck
    :diminish)
       (flycheck-add-mode 'tex-chktex 'LaTeX-mode)
       (add-hook 'LaTeX-mode-hook 'flycheck-mode)
       (add-hook 'LaTeX-mode-hook (lambda () (set-fringe-mode 30)))
       (jas/leader-def
      :states 'normal
    "cc" 'consult-flycheck
    "cg" 'consult-ripgrep
    )
#+end_src
* desktop
** exwm
*** helper functions
#+begin_src emacs-lisp
(server-start)
  (use-package exwm)
  (defun jas/bind-command (key command &rest bindings)
  "Bind KEYs to COMMANDs globally"
  (while key
    (exwm-input-set-key (kbd key)
                        `(lambda ()
                           (interactive)
                           (jas/run-in-background ,command)))
    (setq key (pop bindings)
          command (pop bindings))))
  (defun make-external-command (command)
    (lambda ()
      (interactive)
      (let ((buffer-name (car (split-string command))))
        (cond
         ((equal buffer-name (buffer-name))
          (switch-to-last-used-buffer))
         ((get-buffer buffer-name)
          (switch-to-buffer (get-buffer buffer-name)))
         (t (start-process-shell-command buffer-name nil command))))))

  (setq exwm-input-prefix-keys
        '(?\M-x))

  (defun jas/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))
  (add-hook 'exwm-update-class-hook #'jas/exwm-update-class)
  (defun jas/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
#+end_src
*** movement
#+begin_src emacs-lisp
(setq exwm-workspace-number 5)
 (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([?\s-h] . windmove-left)
          ([?\s-l] . windmove-right)
          ([?\s-k] . windmove-up)
          ([?\s-j] . windmove-down)
          ([?\s-q] . exwm-workspace-delete)
          ([?\s-s] . evil-window-vsplit)
          ([?\s-v] . evil-window-split)
          ([?\s-p] . exwm-workspace-switch)
          ([?\s-w] . evil-window-delete)


          ;; Switch workspace
          ;;          ([?\s-w] . exwm-workspace-switch)

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

#+end_src
*** keys
#+begin_src emacs-lisp
  (jas/bind-command
  "<XF86AudioMute>" "amixer set Master toggle"
  "<XF86AudioLowerVolume>" "amixer set Master 10%-"
  "<XF86AudioRaiseVolume>" "amixer set Master 10%+"
  "<XF86MonBrightnessUp>" "brightnessctl set 10%+"
  "<XF86MonBrightnessDown>" "brightnessctl set 10%-"
  "s-b" "qutebrowser")
  (exwm-input-set-key (kbd "s-x") 'counsel-linux-app)
#+end_src
*** polybar
#+begin_src emacs-lisp
  (defvar jas/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun jas/kill-panel ()
    (interactive)
    (when jas/polybar-process
      (ignore-errors
        (kill-process jas/polybar-process)))
    (setq jas/polybar-process nil))

  (defun jas/start-panel ()
    (interactive)
    (jas/kill-panel)
    (setq jas/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun jas/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "")
      (1 "")
      (2 "")
      (3 "")
      (4 "")))
  (defun jas/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun jas/send-polybar-exwm-workspace ()
    (jas/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'jas/send-polybar-exwm-workspace)
#+end_src
*** init hook
#+begin_src emacs-lisp
  (require 'exwm-randr)
  (exwm-randr-enable)
  (start-process-shell-command "xrandr" nil "xrandr --output eDP-1 --primary --mode 3456x2160 --pos 0x0 --rotate normal --output DP-1 --off --output DP-2 --off --output DP-3 --off")
  (defun jas/exwm-init-hook ()
    (jas/run-in-background "dropbox")
    (jas/run-in-background "nm-applet")
    (jas/run-in-background "blueman-applet")
    (jas/run-in-background "pasystray")
    ;; Make workspace 1 be the one where we land at startup
    (exwm-workspace-switch-create 1)
   ;; Start the Polybar panel
    (jas/start-panel)
    )
  ;; When EXWM starts up, do some extra confifuration
  (add-hook 'exwm-init-hook #'jas/exwm-init-hook)
  (exwm-enable)
#+end_src
** terminal
#+begin_src emacs-lisp
    (use-package vterm)
    (add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode 0)))
    (add-hook 'eshell-mode-hook (lambda() (display-line-numbers-mode 0)))
  (setq delete-by-moving-to-trash t)
  (jas/leader-def
  :states 'normal
  "t" 'vterm)
#+end_src


